Code in C++ :-
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int calHeight(TreeNode* node){
        if(node == NULL) return 0;
        int lh = calHeight(node->left);
        if(lh == -1) return -1;
        int rh = calHeight(node->right);
        if(rh == -1) return -1;
        
        if(abs(rh-lh) > 1) return -1;
        return 1+(max(lh,rh));
    }
    bool isBalanced(TreeNode* root) {
        return calHeight(root) != -1; //if -1 is returned then the tree is unbalanced and in any other case it returns the height of the BT
        //naive approach

        // if(root == NULL) return true;

        // int lh = calHeight(root->left);
        // int rh = calHeight(root->right);

        // if(abs(lh-rh) > 1) return false;

        // bool checkl = isBalanced(root->left);
        // bool checkr = isBalanced(root->right);

        // if(!checkl || !checkr){
        //     return false;
        // }
        // return true;        
    }
};
